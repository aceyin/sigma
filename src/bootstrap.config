%% =========================================================================================
%% @doc
%% 系统启动时的初始化过程的配置
%% [1] supervisors 和 servers 的配置格式:
%%     #{mfa => {module, fun, args}, restart => restart()}
%%     参数说明:
%%     * mfa:     必填, 需要被启动的 supervisor 模块名, 初始化函数, 以及参数
%%     * restart: 可选, 定义了当该模块终止后的重启策略, 可选值:
%%       - permanent : 该模块总是会被重启(默认值)
%%       - temporary : 该模块不会被重启
%%       - transient : 只有在该模块被非正常终止时才会被重启, 即:
%%                     终止原因除了 normal, shutdown 或 {shutdown, Reason} 之外的情况
%%     * shutdown: 可选, 定义了该模块的停止策略, 可选值:
%%       - brutal_kill : 意味着子进程使用exit（Child，kill）无条件终止。
%%       - 非负整数     : 父进程通过调用exit（Child，shutdown）告诉子进程终止，然后等待返回退出信号.
%%                       如果在指定时间内没有收到退出信号，则使用exit（Child，kill）无条件终止子进程.
%%                       对于 gen_server 来说, 默认值是 5000 毫秒.
%%       - infinity    : 如果子进程是另一个 supervisor，则必须将其设置为 infinity 以便给子树足够的时间来关闭.
%%                       如果子进程是工作进程，也可以将其设置为无穷大
%%  [2] apps 的配置格式: {name, type}
%%      参数说明:
%%      * name: 必填, application 的名称.
%%      * type: 可选, 此 application 启动类型, 默认为 temporary.
%%        - permanent: 若此 app 终止, 则所有其他 app 和整个 erlang 节点也会终止。
%%        - temporary: 若此 app 终止, 则只会向监督者发送通知, 其他任何 app 都不会被终止.
%%        - transient: 若此 app 终止, 且 Reason == normal, 则只会向监督者发送通知, 不会终止其他任何 app.
%%                     若此 app 由于非正常原因终止, 则所有其他 app 和整个 erlang 节点也会被终止.
%% @end
%% =========================================================================================

%% ::::::::::::::::::::::::::::::: 随系统自动启动的 supervisor 配置 :::::::::::::::::::::::::::::::
%% * 格式: #{mfa => {module, fun, args}, restart => restart()}
{ supervisors, [
  % 测试网络的模块
  #{mfa => {echo_sup, start_link, []}}
]}.

%% ::::::::::::::::::::::::::::::: 随系统自动启动的 application 配置 ::::::::::::::::::::::::::::::
%% 格式: {name, type}
{ apps, [
  {network}
]}.

%% ::::::::::::::::::::::::::::::: 随系统自动启动的 gen_server 配置 :::::::::::::::::::::::::::::::
%% * 格式: #{mfa => {module, fun, args}, restart => restart()}
{ servers, [

]}.